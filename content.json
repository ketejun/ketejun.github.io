{"meta":{"title":"科特君Blog","subtitle":null,"description":"年少无为 蹉跎岁月 王者意识 青铜操作","author":"KETE","url":"ketejun.github.io","root":"/"},"pages":[{"title":"","date":"2019-05-07T15:07:12.454Z","updated":"2019-05-07T15:07:12.454Z","comments":false,"path":"tags/index.html","permalink":"ketejun.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-05-07T15:07:59.364Z","updated":"2019-05-07T15:07:59.364Z","comments":false,"path":"categories/index.html","permalink":"ketejun.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"什么是深度学习（DeepLearning）？","slug":"DeepLearning","date":"2020-12-11T11:03:34.000Z","updated":"2020-12-11T14:07:29.350Z","comments":true,"path":"2020/12/11/DeepLearning/","link":"","permalink":"ketejun.github.io/2020/12/11/DeepLearning/","excerpt":"","text":"在过去的几年里，人工智能（AI）一直是媒体大肆炒作的热点话题。机器学习、深度学习和人工智能都出现在不计其数的文章中，而这些文章通常都发表于非技术出版物。我们的未来被描绘成拥有智能聊天机器人、自动驾驶汽车和虚拟助手，这一未来有时被渲染成可怕的景象，有时则被描绘为乌托邦，人类的工作将十分稀少，大部分经济活动都由机器人或人工智能体（AI agent）来完成。对于未来或当前的机器学习从业者来说，重要的是能够从噪声中识别出信号，从而在过度炒作的新闻稿中发现改变世界的重大进展。 深度学习发展由来深度学习思想来源于人类处理视觉信息方式，人类视觉系统是这个世界上最为神奇的一个系统。1981年的诺贝尔医学奖，颁发给了David Hubel（出生于加拿大的美国神经生物学家）和TorstenWiesel，以及Roger Sperry。前两位的主要贡献，是“发现了视觉系统的信息处理”：可视皮层是分级的: 人脑机理 1958 年，David Hubel 和Torsten Wiesel在JohnHopkins University，研究瞳孔区域与大脑皮层神经元的对应关系。他们在猫的后脑头骨上，开了一个3 毫米的小洞，向洞里插入电极，测量神经元的活跃程度。然后，他们在小猫的眼前，展现各种形状、各种亮度的物体。并且，在展现每一件物体时，还改变物体放置的位置和角度。他们期望通过这个办法，让小猫瞳孔感受不同类型、不同强弱的刺激。之所以做这个试验，目的是去证明一个猜测。位于后脑皮层的不同视觉神经元，与瞳孔所受刺激之间，存在某种对应关系。一旦瞳孔受到某一种刺激，后脑皮层的某一部分神经元就会活跃。经历了很多天反复的枯燥的试验，同时牺牲了若干只可怜的小猫，David Hubel 和Torsten Wiesel 发现了一种被称为“方向选择性细胞（Orientation Selective Cell）”的神经元细胞。当瞳孔发现了眼前的物体的边缘，而且这个边缘指向某个方向时，这种神经元细胞就会活跃。这个发现激发了人们对于神经系统的进一步思考。神经-中枢-大脑的工作过程，或许是一个不断迭代、不断抽象的过程。这里的关键词有两个，一个是抽象，一个是迭代。从原始信号，做低级抽象，逐渐向高级抽象迭代。人类的逻辑思维，经常使用高度抽象的概念。例如，从原始信号摄入开始（瞳孔摄入像素 Pixels），接着做初步处理（大脑皮层某些细胞发现边缘和方向），然后抽象（大脑判定，眼前的物体的形状，是圆形的），然后进一步抽象（大脑进一步判定该物体是只气球）。 这个生理学的发现，促成了计算机人工智能，在四十年后的突破性发展。总的来说，人的视觉系统的信息处理是分级的。从低级的V1区提取边缘特征，再到V2区的形状或者目标的部分等，再到更高层，整个目标、目标的行为等。也就是说高层的特征是低层特征的组合，从低层到高层的特征表示越来越抽象，越来越能表现语义或者意图。而抽象层面越高，存在的可能猜测就越少，就越利于分类。例如，单词集合和句子的对应是多对一的，句子和语义的对应又是多对一的，语义和意图的对应还是多对一的，这是个层级体系。 视觉系统 深度学习是机器学习的分支深度学习其动机在于建立可以模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如，图像、声音和文本。深度学习之所以被称为“深度”，是因为之前的机器学习方法都是浅层学习。深度学习可以简单理解为传统神经网络（Neural Network）的发展。大约二三十年前，神经网络曾经是机器学习领域特别热门的一个方向，这种基于统计的机器学习方法比起过去基于人工规则的专家系统，在很多方面显示出优越性。深度学习与传统的神经网络之间有相同的地方，采用了与神经网络相似的分层结构：系统是一个包括输入层、隐层（可单层、可多层）、输出层的多层网络，只有相邻层节点（单元）之间有连接，而同一层以及跨层节点之间相互无连接。这种分层结构，比较接近人类大脑的结构（但不得不说，实际上相差还是很远的，考虑到人脑是个异常复杂的结构，很多机理我们目前都是未知的）。 神经网络 人类从经验中学习知识。经验越丰富，可以学到的知识越多。在人工智能 (AI) 学科的深度学习领域，这一原理也相通，即由人工智能软硬件提供动力支持的机器从经验中学习知识。用于机器从中学习知识的这些经验由机器采集的数据确定，数据的数量和质量决定了机器可以学到的知识量。深度学习（Deep Learning）是机器学习(Machine Learning)的一个分支，是一种试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。 深度学习是机器学习中一种基于对数据进行表征学习的算法，至今已有数种深度学习框架，如卷积神经网络和深度置信网络和递归神经网络等已被应用在计算机视觉、语音识别、自然语言处理、音频识别与生物信息学等领域并获取了极好的效果。许多传统机器学习算法学习能力有限，数据量的增加并不能持续增加学到的知识总量，而深度学习系统可以通过访问更多数据来提升性能，即“更多经验”的机器代名词。机器通过深度学习获得足够经验后，即可用于特定的任务，如驾驶汽车、识别田地作物间的杂草、确诊疾病、检测机器故障等。 人工智能、机器学习和深度学习三者的关系 深度学习是一个数学问题机器学习和数学，是深度学习的一体两面。机器学习是深度学习的方法论，数学是其背后的理论支撑。其实每一种算法，究其根本，都是一种数学表达。无论是机器学习，还是深度学习，都是试图找到一个函数，这个函数可以简单，可以复杂，函数的表达并不重要，只是一个工具，重要的是这个函数能够尽可能准确的拟合出输入数据和输出结果间的关系。就像我们在各个任务中做的那样，比如语音识别、图像识别、下围棋，人机问答系统： 机器学习在找输入和输出之间的关系 这就是机器学习要做到的事，找到一个数学表达，即上述例子中的函数f。而深度学习的魅力在于，它的数学表达特别的强！深度学习的强大是有数学原理支撑的，这个原理叫做“万能近似定理”（Universal approximation theorem）。这个定理的道理很简单 —— 神经网络可以拟合任何函数，不管这个函数的表达是多么的复杂。因为这个定理，深度学习在拟合函数这一方面的能力十分强大、暴力和神秘。 深度学习是一个黑箱黑箱的意思是，深度学习的中间过程不可知，深度学习产生的结果不可控。一方面，我们比较难知道网络具体在做些什么；另一方面，我们很难解释神经网络在解决问题的时候，为什么要这么做，为什么有效果。在传统的机器学习中，算法的结构大多充满了逻辑，这种结构可以被人分析，最终抽象为某种流程图或者一个代数上的公式，最典型的比如决策树，具有非常高的可解释性。 决策树 到了深度学习，这样子的直观就不见了。简单来说，深度学习的工作原理，是通过一层层神经网络，使得输入的信息在经过每一层时，都做一个数学拟合，这样每一层都提供了一个函数。因为深度学习有好多层，通过这每一层的函数的叠加，深度学习网络的输出就无限逼近目标输出了。这样一种“万能近似”，很多时候是输入和输出在数值上的一种耦合，而不是真的找到了一种代数上的表达式。当我们在说”拟合“、”函数“这一类词的时候，你或许认为我们会像写公式一样把输入和输出之间的关系列在黑板上。所以，很多时候，你的深度学习网络能很好的完成你的任务，可是你并不知道网络学习到了什么，也不知道网络为什么做出了特定的选择。知其然而不知其所以然，这可以看作是深度学习的常态，也是深度学习工作中的一大挑战。 深度学习的优点和缺点 优点与缺点 优点1：学习能力强从结果来看，深度学习的表现非常好，他的学习能力非常强。优点2：覆盖范围广，适应性好深度学习的神经网络层数很多，宽度很广，理论上可以映射到任意函数，所以能解决很复杂的问题。优点3：数据驱动，上限高深度学习高度依赖数据，数据量越大，他的表现就越好。在图像识别、面部识别、NLP 等部分任务甚至已经超过了人类的表现。同时还可以通过调参进一步提高他的上限。优点4：可移植性好由于深度学习的优异表现，有很多框架可以使用，例如 TensorFlow、Pytorch。这些框架可以兼容很多平台。缺点1：计算量大，便携性差深度学习需要大量的数据很大量的算力，所以成本很高。并且现在很多应用还不适合在移动设备上使用。目前已经有很多公司和团队在研发针对便携设备的芯片。这个问题未来会得到解决。缺点2：硬件需求高深度学习对算力要求很高，普通的 CPU 已经无法满足深度学习的要求。主流的算力都是使用 GPU 和 TPU，所以对于硬件的要求很高，成本也很高。缺点3：模型设计复杂深度学习的模型设计非常复杂，需要投入大量的人力物力和时间来开发新的算法和模型。大部分人只能使用现成的模型。缺点4：没有”人性”，容易存在偏见由于深度学习依赖数据，并且可解释性不高。在训练数据不平衡的情况下会出现性别歧视、种族歧视等问题。 四种典型的深度学习算法 4中深度学习算法 卷积神经网络 — CNN 卷积神经网络 CNN 的价值：能够将大数据量的图片有效的降维成小数据量(并不影响结果)能够保留图片的特征，类似人类的视觉原理CNN 的基本原理：卷积层 — 主要作用是保留图片的特征池化层 — 主要作用是把数据降维，可以有效的避免过拟合全连接层 — 根据不同任务输出我们想要的结果CNN 的实际应用：1、 图片分类、检索2、 目标定位检测3、 目标分割4、 人脸识别5、 骨骼识别 循环神经网络 — RNN 循环神经网络 RNN是一种能有效的处理序列数据的算法。比如：文章内容、语音音频、股票价格走势等等。之所以他能处理序列数据，是因为在序列中前面的输入也会影响到后面的输出，相当于有了“记忆功能”。但是 RNN 存在严重的短期记忆问题，长期的数据影响很小（哪怕他是重要的信息）。于是基于RNN 出现了LSTM和GRU等变种算法。这些变种算法主要有几个特点：1、 长期信息可以有效的保留2、 挑选重要信息保留，不重要的信息会选择“遗忘”RNN 几个典型的应用如下：1、 文本生成2、 语音识别3、 机器翻译4、 生成图像描述5、 视频标记 生成对抗网络 — GANs假设一个城市治安混乱，很快，这个城市里就会出现无数的小偷。在这些小偷中，有的可能是盗窃高手，有的可能毫无技术可言。假如这个城市开始整饬其治安，突然开展一场打击犯罪的「运动」，警察们开始恢复城市中的巡逻，很快，一批「学艺不精」的小偷就被捉住了。之所以捉住的是那些没有技术含量的小偷，是因为警察们的技术也不行了，在捉住一批低端小偷后，城市的治安水平变得怎样倒还不好说，但很明显，城市里小偷们的平均水平已经大大提高了。 警察们开始继续训练自己的破案技术，开始抓住那些越来越狡猾的小偷。随着这些职业惯犯们的落网，警察们也练就了特别的本事，他们能很快能从一群人中发现可疑人员，于是上前盘查，并最终逮捕嫌犯；小偷们的日子也不好过了，因为警察们的水平大大提高，如果还想以前那样表现得鬼鬼祟祟，那么很快就会被警察捉住。为了避免被捕，小偷们努力表现得不那么「可疑」，而魔高一尺、道高一丈，警察也在不断提高自己的水平，争取将小偷和无辜的普通群众区分开。随着警察和小偷之间的这种「交流」与「切磋」，小偷们都变得非常谨慎，他们有着极高的偷窃技巧，表现得跟普通群众一模一样，而警察们都练就了「火眼金睛」，一旦发现可疑人员，就能马上发现并及时控制 — — 最终，我们同时得到了最强的小偷和最强的警察。 警察和小偷 深度强化学习 — RL强化学习算法的思路非常简单，以游戏为例，如果在游戏中采取某种策略可以取得较高的得分，那么就进一步「强化」这种策略，以期继续取得较好的结果。这种策略与日常生活中的各种「绩效奖励」非常类似。我们平时也常常用这样的策略来提高自己的游戏水平。在Flappy bird这个游戏中，我们需要简单的点击操作来控制小鸟，躲过各种水管，飞的越远越好，因为飞的越远就能获得更高的积分奖励。这就是一个典型的强化学习场景： 机器有一个明确的小鸟角色 — — 代理 需要控制小鸟飞的更远 — — 目标 整个游戏过程中需要躲避各种水管 — — 环境 躲避水管的方法是让小鸟用力飞一下 — — 行动 飞的越远，就会获得越多的积分 — — 奖励 Flappy bird 你会发现，强化学习和监督学习、无监督学习 最大的不同就是不需要大量的“数据喂养”。而是通过自己不停的尝试来学会某些技能。 总结深度学习属于机器学习的范畴，深度学习可以说是在传统神经网络基础上的升级，约等于神经网络。 深度学习和传统机器学习在数据预处理上都是类似的。核心差别在特征提取环节，深度学习由机器自己完成特征提取，不需要人工提取。","categories":[],"tags":[]},{"title":"2020.3.12","slug":"2020","date":"2020-03-12T05:55:07.000Z","updated":"2020-03-12T06:26:40.822Z","comments":true,"path":"2020/03/12/2020/","link":"","permalink":"ketejun.github.io/2020/03/12/2020/","excerpt":"","text":"&emsp;&emsp;很久没写东西了，在这个疫情期间，今天突然想起来，还有一个这样的玩意在这儿，前段时间忙其他重要的事去了，把原本要好好弄的一些东西都给耽搁了，现在想起来，发现什么东西都没弄好，可能是因为太浮躁了吧，对！就是太浮躁了，不能静下心来。越来越颓废了，真想寻求改革变革，但是局限性又很大。接下来将何去何从，还不知道呢？","categories":[],"tags":[]},{"title":"vue生命周期钩子","slug":"vueLifeCylce","date":"2019-07-31T03:29:03.000Z","updated":"2019-07-31T06:41:49.408Z","comments":true,"path":"2019/07/31/vueLifeCylce/","link":"","permalink":"ketejun.github.io/2019/07/31/vueLifeCylce/","excerpt":"","text":"什么是生命周期钩子？ 从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件这些事件，统称为生命周期。 主要的生命周期函数分类：1.创建期间的生命周期函数： beforeCreate:实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性。 created:实例已经在内存中创建OK,此时data和methods已经创建OK，此时还没有开始编译模板。 beforeMount:此时已经完成了模板的编译，但是还没有挂载到页面中。 mounted:此时，已经将编译好的模板，挂载到了页面指定的容器中显示。 2.运行期间的生命周期函数： beforeUpdate:状态更新之前执行此函数，此时data中的状态值是最新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染DOM节点。 updated:实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了。 3.销毁期间的生命周期函数： beforeDestroy:实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed:Vue实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。","categories":[],"tags":[]},{"title":"breathe","slug":"breathe","date":"2019-06-11T13:36:41.000Z","updated":"2019-06-11T13:47:12.646Z","comments":true,"path":"2019/06/11/breathe/","link":"","permalink":"ketejun.github.io/2019/06/11/breathe/","excerpt":"","text":"今天无意间用到了呼吸灯效果样式： css:123456789101112131415161718192021222324252627.breathBox &#123; width: 200px; height: 200px; border: 1px solid #2b92d4; border-radius: 50%; text-align: center; margin: 100px auto; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); overflow: hidden; animation-timing-function: ease-in-out; animation-name: breathe; animation-duration: 1500ms; animation-iteration-count: infinite; animation-direction: alternate; &#125; @keyframes breathe &#123; 0% &#123; opacity: 0.4; box-shadow: 0 1px 2px rgba(0, 147,223,0.4), 0 1px 1px rgba(0, 147, 223, 0.1) inset; &#125; 100% &#123; opacity: 1; border: 1px solid rgba(59, 235, 235, 0.7); box-shadow: 0 1px 30px #0093df, 0 1px 20px #0093df inset; &#125; &#125; html:1&lt;div class=&quot;breathBox&quot;&gt;&lt;/div&gt;","categories":[],"tags":[{"name":"html5","slug":"html5","permalink":"ketejun.github.io/tags/html5/"},{"name":"css3","slug":"css3","permalink":"ketejun.github.io/tags/css3/"}]},{"title":"呼吸灯效果","slug":"呼吸灯效果-1","date":"2019-06-11T13:33:56.000Z","updated":"2019-06-11T13:37:01.548Z","comments":true,"path":"2019/06/11/呼吸灯效果-1/","link":"","permalink":"ketejun.github.io/2019/06/11/呼吸灯效果-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"再接再厉，继续修炼","slug":"xiuxing","date":"2019-06-01T16:39:34.000Z","updated":"2019-06-01T16:45:25.104Z","comments":true,"path":"2019/06/02/xiuxing/","link":"","permalink":"ketejun.github.io/2019/06/02/xiuxing/","excerpt":"","text":"最近受到了严重打击，能力太弱，身心疲惫，得继续抓紧提高能力层次，从量变向质变转化，循循渐进，再接再厉，ES6,Vue.js and iView 我干死你！","categories":[],"tags":[]},{"title":"vue小组件","slug":"小组件","date":"2019-05-26T15:29:08.000Z","updated":"2019-05-26T15:41:00.587Z","comments":true,"path":"2019/05/26/小组件/","link":"","permalink":"ketejun.github.io/2019/05/26/小组件/","excerpt":"","text":"1234567891011121314151617181920212223242526&lt;!-- html --&gt;&lt;div id=&quot;app&quot;&gt; &lt;ol&gt; &lt;book-item v-for=&quot;item in books&quot; v-bind:book=&quot;item&quot;&gt;&lt;/book-item&gt; &lt;/ol&gt;&lt;/div&gt;&lt;script&gt;//组件定义：book-itemVue.component(&apos;book-item&apos;,&#123; props: [&apos;book&apos;], template: &apos;&lt;li&gt;&#123;&#123;book.title&#125;&#125;&lt;/li&gt;&apos;&#125;)//Vue对象实例化var vm = new Vue(&#123; el: &apos;#app&apos;, data: &#123; books: [ &#123;title: &apos;javascript&apos;&#125;, &#123;title: &apos;Vue.js&apos;&#125;, &#123;title: &apos;node.js&apos;&#125; ] &#125;&#125;)&lt;/script&gt;","categories":[],"tags":[]},{"title":"煎熬","slug":"520","date":"2019-05-19T16:05:02.000Z","updated":"2019-05-19T16:12:13.500Z","comments":true,"path":"2019/05/20/520/","link":"","permalink":"ketejun.github.io/2019/05/20/520/","excerpt":"","text":"凄凄惨惨戚戚，希望曙光黯淡，何时才能时来运转","categories":[],"tags":[]},{"title":"box-sizing,transition和translate分别是什么","slug":"box-sizing-transition-translate","date":"2019-05-12T14:38:06.000Z","updated":"2019-05-12T14:43:28.293Z","comments":true,"path":"2019/05/12/box-sizing-transition-translate/","link":"","permalink":"ketejun.github.io/2019/05/12/box-sizing-transition-translate/","excerpt":"","text":"1、box-sizing:用来指定模型的大小的计算方式。主要分为border-box(从边框固定盒子大小)、content-box(从内容固定盒子大小)两种计算方式。 2、transition:当前元素只要有”属性”发生变化时，可以平滑的进行过渡。通过transition-propety设置过渡属性；transition-duration设置过渡时间；transition-timing-function设置过渡速度；transition-delay设置过渡延时。 3、translate：通过移动改变元素的位置；有x,y,z三个属性","categories":[],"tags":[{"name":"box-sizing","slug":"box-sizing","permalink":"ketejun.github.io/tags/box-sizing/"},{"name":"transition","slug":"transition","permalink":"ketejun.github.io/tags/transition/"},{"name":"translate","slug":"translate","permalink":"ketejun.github.io/tags/translate/"}]},{"title":"ajax初体验","slug":"ajax初体验","date":"2019-05-10T13:54:00.000Z","updated":"2019-05-10T14:09:45.780Z","comments":true,"path":"2019/05/10/ajax初体验/","link":"","permalink":"ketejun.github.io/2019/05/10/ajax初体验/","excerpt":"","text":"&ensp;&ensp;上次学ajax,感觉没什么味，然后就跳过了。今天重新把它拾起。123456789101112131415161718192021222324252627282930313233343536373839404142&lt;div&gt; &lt;div id=&quot;showInfo&quot;&gt;&lt;/div&gt; &lt;form action=&quot;&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;&lt;br&gt; 密 码：&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;登录&quot; id=&quot;btn&quot;&gt; &lt;/form&gt;&lt;/div&gt; &lt;script&gt; var btn = document.getElementById(&apos;btn&apos;); btn.onclick = function() &#123; var username = document.getElementById(&apos;username&apos;).value; var password = document.getElementById(&apos;password&apos;).value; var xhr = null; //兼容代码 if(window.XMLHttpRequest) &#123; xhr = new XMLHttpRequest(); &#125; else &#123; xhr = new ActiveXObject(&quot;Mircsoft.XML&quot;); &#125; var url = &apos;./check.php?username=&apos;+username+&quot;&amp;password=&quot;+password; xhr.open(&apos;get&apos;, url, true); xhr.onreadystatechange = function() &#123; if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; var data = xhr.responseText; if (data == 1) &#123; document.getElementById(&apos;showInfo&apos;).innerHTML = &apos;用户名或者密码错误&apos;; &#125; else if (data == 2) &#123; document.getElementById(&apos;showInfo&apos;).innerHTML = &apos;登录成功！&apos;; &#125; &#125; &#125; xhr.send(null); &#125; &lt;/script&gt;","categories":[],"tags":[{"name":"ajax","slug":"ajax","permalink":"ketejun.github.io/tags/ajax/"},{"name":"XMLHttpRequest","slug":"XMLHttpRequest","permalink":"ketejun.github.io/tags/XMLHttpRequest/"},{"name":"onreadystatechang","slug":"onreadystatechang","permalink":"ketejun.github.io/tags/onreadystatechang/"},{"name":"responseText","slug":"responseText","permalink":"ketejun.github.io/tags/responseText/"}]},{"title":"共鸣","slug":"共鸣","date":"2019-05-09T13:38:55.000Z","updated":"2019-05-09T14:18:58.559Z","comments":true,"path":"2019/05/09/共鸣/","link":"","permalink":"ketejun.github.io/2019/05/09/共鸣/","excerpt":"","text":"&emsp;&emsp;今天在朋友圈看到一个人发了一条不错的内容，使我产生了共鸣。他发的内容：“许多人因为学业、工作、结婚之类的问题焦虑。其实需要明白一件事————没人规定你这辈子必须考上哪所大学，做怎样的工作，在什么岁数结婚。无论是选择早早赚钱谋生奠定生活的基石，还是披荆斩棘构筑精神的乌托邦，都是正确答案。大多数人选择的路或许会好走一些，但不代表人迹罕至的路就行不通。爱因斯坦有句话是：“并不是每一件计算出来的事都有意义，也不是每一件有意义的事都能够被算出来。”，生活没那么多应该或不应该，也没那么多条条框框的标准。来人间一趟，当然要玩得开心”。 &emsp;&emsp;或获取这算是心灵鸡汤和心灵慰藉吧，在遇到不顺感觉沮丧，用来激励自己，给自己加油打气，这应该算是正能量。我这个人以前喝得鸡汤太多了，自某时以后，开始对一些纯粹鸡汤开始反胃，不想被灌得太臃肿，反而毒害看自己。个人坚定的认为，在生活种要遭遇和经历各种事情，才能更好的促进自我，如果没那种遭遇和经历，那只能在那猜想幻想或想象。今天，首次体验了一把前端面试，发现了自己致命的弱处，很感谢今天这次机会，敲醒了沉睡的我，让我知道接下来该怎么去改正。 &emsp;&emsp;所以，我的抓紧时间，现在已经进入了艰难的时刻，赶块把这艰难时刻度过去。我还很弱，做事要趁早，意识要强，毅力要坚定。","categories":[],"tags":[]},{"title":"get和post","slug":"get和post","date":"2019-05-07T16:33:31.000Z","updated":"2019-05-07T17:02:46.063Z","comments":true,"path":"2019/05/08/get和post/","link":"","permalink":"ketejun.github.io/2019/05/08/get和post/","excerpt":"两种 HTTP 请求方法：GET 和 POST在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。 &emsp;&emsp;GET - 从指定的资源请求数据。 &emsp;&emsp;POST - 向指定的资源提交要被处理的数据 GET方法&emsp;请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：&emsp;&emsp;/test/demo_form.asp?name1=value1&amp;name2=value2 &emsp;有关 GET 请求的其他一些注释：&emsp;&emsp;&emsp;&emsp; GET 请求可被缓存&emsp;&emsp;&emsp;&emsp; GET 请求保留在浏览器历史记录中&emsp;&emsp;&emsp;&emsp; GET 请求可被收藏为书签&emsp;&emsp;&emsp;&emsp; GET 请求不应在处理敏感数据时使用&emsp;&emsp;&emsp;&emsp; GET 请求有长度限制&emsp;&emsp;&emsp;&emsp; GET 请求只应当用于取回数据","text":"两种 HTTP 请求方法：GET 和 POST在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。 &emsp;&emsp;GET - 从指定的资源请求数据。 &emsp;&emsp;POST - 向指定的资源提交要被处理的数据 GET方法&emsp;请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：&emsp;&emsp;/test/demo_form.asp?name1=value1&amp;name2=value2 &emsp;有关 GET 请求的其他一些注释：&emsp;&emsp;&emsp;&emsp; GET 请求可被缓存&emsp;&emsp;&emsp;&emsp; GET 请求保留在浏览器历史记录中&emsp;&emsp;&emsp;&emsp; GET 请求可被收藏为书签&emsp;&emsp;&emsp;&emsp; GET 请求不应在处理敏感数据时使用&emsp;&emsp;&emsp;&emsp; GET 请求有长度限制&emsp;&emsp;&emsp;&emsp; GET 请求只应当用于取回数据 POST方法&emsp;请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：&emsp;&emsp;POST /test/demo_form.asp HTTP/1.1&emsp;&emsp;Host: w3schools.com&emsp;&emsp;name1=value1&amp;name2=value2 &emsp;有关 POST 请求的其他一些注释：&emsp;&emsp;&emsp;&emsp;POST 请求不会被缓存&emsp;&emsp;&emsp;&emsp;POST 请求不会保留在浏览器历史记录中&emsp;&emsp;&emsp;&emsp;POST 不能被收藏为书签&emsp;&emsp;&emsp;&emsp;POST 请求对数据长度没有要求 比较 GET 与 POST下面的表格比较了两种 HTTP 方法：GET 和 POST。","categories":[],"tags":[{"name":"get","slug":"get","permalink":"ketejun.github.io/tags/get/"},{"name":"post","slug":"post","permalink":"ketejun.github.io/tags/post/"}]},{"title":"CSS中px,em和rem的区别？","slug":"cssTechnolgy","date":"2019-05-03T15:12:42.000Z","updated":"2019-05-03T15:41:28.673Z","comments":true,"path":"2019/05/03/cssTechnolgy/","link":"","permalink":"ketejun.github.io/2019/05/03/cssTechnolgy/","excerpt":"","text":"px是像素，设置字体大小时，比较稳定和精确。但是如果改变了浏览器的缩放，页面布局会被打破。因此，这时就提出了使用“em”来定义Web页面的字体。 em是根据基准来缩放字体的大小。em实质是一个相对值，而非具体的数值。这种技术需要一个参考点，一般都是以自己的或父级的“font-size”为基准。 rem: em是相对与其父元素来设置字体大小的，这样就会存在一个问题，进行任何元素设置，都有可能需要知道它父元素的大小。而rem时相对于根元素,这样就意味着，我们只需要在根元素确定一个参考值。","categories":[],"tags":[{"name":"-px -em -rem","slug":"px-em-rem","permalink":"ketejun.github.io/tags/px-em-rem/"}]},{"title":"参观开福寺","slug":"MayDayTwo","date":"2019-05-02T15:21:40.000Z","updated":"2019-05-07T17:30:09.586Z","comments":true,"path":"2019/05/02/MayDayTwo/","link":"","permalink":"ketejun.github.io/2019/05/02/MayDayTwo/","excerpt":"今天是五月二号，今天又是一点都没学习的一天，跟着吕二和他女友去了开福庙，我原本打算今天是不出去的， 吕二说高峰猛男待会也过来，我才跟着他们去的。谁知这个高峰猛男放了我们的鸽子，吕二出发前打了电话给他， 让他也早点出发，他答应的好好的，等到我们到了，在那里等了一会儿，然后吕二打电话给他，问他到哪儿了， 对方接电话的是他女友，说他还在床上睡觉，来不了了。我估计是他有事了，才让她女友接电话推脱。 现在的他们这些人，说话是一个比一个不靠谱，一个比一个喜欢吹了，反正搞得我是稀里糊涂的，还要去过滤他们 所说的话是多少时真的。","text":"今天是五月二号，今天又是一点都没学习的一天，跟着吕二和他女友去了开福庙，我原本打算今天是不出去的， 吕二说高峰猛男待会也过来，我才跟着他们去的。谁知这个高峰猛男放了我们的鸽子，吕二出发前打了电话给他， 让他也早点出发，他答应的好好的，等到我们到了，在那里等了一会儿，然后吕二打电话给他，问他到哪儿了， 对方接电话的是他女友，说他还在床上睡觉，来不了了。我估计是他有事了，才让她女友接电话推脱。 现在的他们这些人，说话是一个比一个不靠谱，一个比一个喜欢吹了，反正搞得我是稀里糊涂的，还要去过滤他们 所说的话是多少时真的。 在没进寺庙之前，在外面排吕二和他女友拍了几张照片，他们看了后照片后，他们觉我拍照的技术挺不错的， 要我待会继续帮他们拍，看来他们是尝到了甜头，我就答应了他们。我们准备进开福寺，我的门票是吕二女友买的， 吕二和他女友在寺庙拜了那些神明，他女友还求了一支事业签。我是一个唯物主义，信奉科学的人，当然我没像他们那样， 我只是在里面转悠参观参观，看看那些信徒的行为。随后，吕大和老王也过来了，等他们搞完了那些，我们在寺内的一口池塘边， 开启疯狂拍照模式，拍了不少照片，我用手机只拍了几张而已，我追求的是质量精湛，不是普通简单与数量，我帮吕二和他女友拍的 照片，他们大赞好，毕竟我在他们当中，还是有那么些技术的。拍完照片后，我们就出了寺院，吕大他女友发信息来，要他打印准考证 ，下午5点截止，我们跟着吕大满街找打印店，走了一段时间好不容易找几家，都放假关门了。吕大和他女友也真是的，这不知道是他 们两个当中，其中的哪一个这么不着急，非要这个时候才……。 最后，坐车回去，说高峰来大学城了，一起过来爬岳麓山，我们坐公交回去做了一个多小时，路上堵车。最后到了大学城又没见到高峰 猛男。最后，一个人就回去了，今天一天充当了摄影师和陪同。","categories":[],"tags":[{"name":"摄影师","slug":"摄影师","permalink":"ketejun.github.io/tags/摄影师/"}]},{"title":"五一劳动节的一天","slug":"MayDay","date":"2019-05-01T15:54:31.000Z","updated":"2019-05-03T16:18:13.671Z","comments":true,"path":"2019/05/01/MayDay/","link":"","permalink":"ketejun.github.io/2019/05/01/MayDay/","excerpt":"今天是五一劳动节，没有学习的一天，由于昨晚熬夜很晚，今早将近10点才起床。 今天算是玩了一天吧，白天先三人在美术馆、艺术馆转悠一下，然后去洋湖湿地公园， 后来陆续有来了几位好友，然后约定去了五一步行街，先陪着他们逛了服装点，他们几个 每人买了一件T恤，其实我也想买，但是经济不行，心想等有了一定的资金再来换装备。","text":"今天是五一劳动节，没有学习的一天，由于昨晚熬夜很晚，今早将近10点才起床。 今天算是玩了一天吧，白天先三人在美术馆、艺术馆转悠一下，然后去洋湖湿地公园， 后来陆续有来了几位好友，然后约定去了五一步行街，先陪着他们逛了服装点，他们几个 每人买了一件T恤，其实我也想买，但是经济不行，心想等有了一定的资金再来换装备。 逛完了服装店，又说吃完饭待会去杜甫江阁看烟花。选了一家菜店，排了一会队才上饭， 我其实已经很饿有很渴了，一上来先倒了几杯茶喝，饭来了立马盛饭，而他们比较客气， 慢慢夹着菜品尝。吃完后，沿着街道走去江边，妈呀，今天的人真多，太恐怖了，我们几个如果 稍有不留意，可能就会走散，然后估计就联系不上了，此时的手机根本就没信号，人流量太大了， 我提醒他们一定要走在一起，以防万一。来到江边更是大吃一惊，马路上的交通已经瘫痪，马路已经被 人群占领，只为看着还算精彩的烟花。我们反正没找到一个好的位置，随后都注意这拥挤的人群去了， 今天可是首次亲身体验这种，很惊讶！我们怕烟花燃放完后，回去更拥挤，就先往回走了，谁知一路过去 都是拥挤的人群，我们挤呀，慢慢的挪呀，每一步都是如此的艰难，一边走一边还有打量着同伴，很怕给走散了， 本来几十分钟的事，我们就这样花了好几个小时，最终从拥挤的人群走出，才叹了一口气。 今天有点累，脚走的有些酸痛，不过这次算是很难得的吧。","categories":[],"tags":[]},{"title":"心情","slug":"2019-04-30记","date":"2019-04-30T13:00:16.000Z","updated":"2019-05-03T16:19:25.992Z","comments":true,"path":"2019/04/30/2019-04-30记/","link":"","permalink":"ketejun.github.io/2019/04/30/2019-04-30记/","excerpt":"有时“风” 有时“雨” &emsp;&emsp;长沙的天气是出了名的变态，有时候一周之内的天气经过春夏秋冬四个季节，有时候就是冰火两重天，有时候要么就是狂风骤雨或者细雨绵绵阴阴沉沉。这样的天气很容易影响人的心情，我就深受其害，搞得心情抑郁，不受控制，脾气暴躁了，更可恶的是在这个时候打了几把王者荣耀被队友坑惨，躁动的想破口大骂，有一种想摔手机的冲动。突然内心发觉这有失大雅风格，请息怒，关掉游戏喝口水压压惊，顺便打开微信看看那几个庸俗主义，又在群里面吹着什么牛皮，那几个人一天到晚在群里面牛皮吹的轰轰，前段时间我看着不爽，我还会去告诫几下，但是没什么卵用，现在任由他们去吧，只是感觉有些可惜与失望，那么一个高材生已经散失纯正的本质，变得庸俗不堪，没有了思想，满嘴的胡说八道，吹着牛逼向群里的人展示他们庸俗能力高超一面。这吕氏两兄弟的庸俗行为把其他人没影响到，却把自家兄弟影响的淋淋尽致，还各显神通各有特色，攀比吹，嗨，吃喝和形式主义，恐怕已经病入膏肓，讳疾忌医了，在下也无能为力，像我这种没什么影响力的人，劝谏也不起作用，反到会被自找麻烦，只好静静的看着他们就行，拉开界限，不被同化就行，好歹我也是一个有个性，有思想的人。","text":"有时“风” 有时“雨” &emsp;&emsp;长沙的天气是出了名的变态，有时候一周之内的天气经过春夏秋冬四个季节，有时候就是冰火两重天，有时候要么就是狂风骤雨或者细雨绵绵阴阴沉沉。这样的天气很容易影响人的心情，我就深受其害，搞得心情抑郁，不受控制，脾气暴躁了，更可恶的是在这个时候打了几把王者荣耀被队友坑惨，躁动的想破口大骂，有一种想摔手机的冲动。突然内心发觉这有失大雅风格，请息怒，关掉游戏喝口水压压惊，顺便打开微信看看那几个庸俗主义，又在群里面吹着什么牛皮，那几个人一天到晚在群里面牛皮吹的轰轰，前段时间我看着不爽，我还会去告诫几下，但是没什么卵用，现在任由他们去吧，只是感觉有些可惜与失望，那么一个高材生已经散失纯正的本质，变得庸俗不堪，没有了思想，满嘴的胡说八道，吹着牛逼向群里的人展示他们庸俗能力高超一面。这吕氏两兄弟的庸俗行为把其他人没影响到，却把自家兄弟影响的淋淋尽致，还各显神通各有特色，攀比吹，嗨，吃喝和形式主义，恐怕已经病入膏肓，讳疾忌医了，在下也无能为力，像我这种没什么影响力的人，劝谏也不起作用，反到会被自找麻烦，只好静静的看着他们就行，拉开界限，不被同化就行，好歹我也是一个有个性，有思想的人。 &emsp;&emsp;不管他们了，任由他们去吧，我已经尽力了，我只想把我自己事干好，只求你们不要影响到我就行，谢天谢地。一直以来，自己的烦恼也很多，感觉被命运给作弄了，处处不顺，已经被折腾的麻痹了，斗志也不如从前，人也变得更懒了，像是在等死一般，说的好像有点过分了哦，其实是偶尔清醒，但是是时常麻痹，想来想去想了很久，相对晚上失眠，感觉问题处在做事的专注度上，不能全身心投入其中，浑浑噩噩，懵懵懂懂，也不知道是不是小时候经常被打到头部的缘故，脑袋中的零部件坏了几个，所以一路走来，一路失败。你说感情，我这个人没什么感情，稍微有了那么一点感情，都被别人给浇灭了，所以吗，我现在是自由自在的很，为所欲为，我心情好高兴了，我就正能量满满；若我不高兴了，要么颓废几天几周，别来烦我。现在感觉很危险，与各位已经有很大的差距了(只是在感情上，这些人已经各个抱得女票归，我已经成为了他们的电灯泡)。看看，太失败，读书学习落后，赚钱落后，感情上落后等等，一直被压制，从未反超过，我恨啊！我的大道在哪，快抵制不住，坚持不下去了，来日若不让我一枝独秀，那确实是真正对不起我，难道我的存在就是一直衬托别人的牛逼，一直被虐？哎呀，还是晴天好，我喜欢晴天，温度合适的，气温暖暖的，心情也舒畅的。此时，想来一首《阿刁》，来抚平一下我的心情","categories":[],"tags":[]},{"title":"前端技术","slug":"yanhua","date":"2019-04-29T09:39:48.000Z","updated":"2019-04-29T11:16:12.919Z","comments":true,"path":"2019/04/29/yanhua/","link":"","permalink":"ketejun.github.io/2019/04/29/yanhua/","excerpt":"","text":"技术 技术更新太快，层出不穷，前端的这些东西已经够我们折腾了！ 学完了这些，感觉在前端界还是相对比较牛逼的，但是那只是短暂片刻而已 若想能力足够深厚，像武侠小说中扫地僧一般，那还得时时刻刻修炼 切记勿浮躁，向全栈开拓，获取洪荒之力，呵呵！若资质不行 那只能幻想而已，只其中一项就够你练个几年几载的。 哈哈！我是属于那种呢？","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"ketejun.github.io/tags/前端/"}]},{"title":"技术篇","slug":"Test","date":"2019-04-28T14:49:49.000Z","updated":"2019-04-28T17:54:41.340Z","comments":true,"path":"2019/04/28/Test/","link":"","permalink":"ketejun.github.io/2019/04/28/Test/","excerpt":"","text":"jQuery的each和原生的JavaScript方法forEach区别？**EcmaScript5提供的** `不兼容IE8.` **jQuery 的 each 由 jQuery 这个第三方库提供** 12345jQuery 2 以下的版本是兼容IE8的.它的 each 方法主要用来遍历jQuery实例对象伪数组.同时它也可以作为低版本浏览器中forEach替代品.jQuery 的实例对象不能使用forEach方法如果想要使用必须转为数组才可以使用.[].slice.call(jQuery实例对象).","categories":[],"tags":[]},{"title":"Git入门指南","slug":"Git入门指南","date":"2019-04-28T14:16:59.000Z","updated":"2019-04-28T14:45:15.655Z","comments":true,"path":"2019/04/28/Git入门指南/","link":"","permalink":"ketejun.github.io/2019/04/28/Git入门指南/","excerpt":"","text":"介绍Git 从入门到放弃 基本使用123456好好学习，天天向上好好学习，天天向上好好学习，天天向上好好学习，天天向上好好学习，天天向上好好学习，天天向上","categories":[],"tags":[]}]}